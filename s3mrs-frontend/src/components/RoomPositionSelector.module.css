/* src/components/RoomPositionSelector.module.css */

.container {
    display: flex;
    gap: 2rem; /* Space between 2D selector and 3D view */
    flex-wrap: wrap; /* Allow wrapping on smaller screens */
    padding: 1rem;
    background-color: #f9f9f9;
    border-radius: 8px;
  }
  
  .panel {
    flex: 1; /* Allow panels to share space */
    min-width: 250px; /* Minimum width before wrapping */
  }
  
  .selectorTitle {
      font-size: 1.1rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
      color: #333;
  }
  
  .selectedInfo {
      margin-bottom: 1rem;
      font-size: 0.95rem;
      color: #555;
      background-color: #fff;
      padding: 0.5rem;
      border-radius: 4px;
      border: 1px solid #eee;
      min-height: 2.5em; /* Prevent layout shift */
  }
  
  .floor {
    margin-bottom: 1.5rem;
    padding: 0.8rem;
    background-color: #fff;
    border-radius: 6px;
    border: 1px solid #eee;
  }
  
  .floorTitle {
    font-weight: bold;
    margin-bottom: 0.8rem;
    font-size: 1rem;
    color: #444;
  }
  
  .grid {
    display: grid;
    grid-template-columns: repeat(3, 45px); /* Slightly larger cells */
    gap: 5px; /* Slightly larger gap */
    justify-content: center; /* Center the grid */
  }
  
  .cell {
    width: 45px;
    height: 45px;
    background-color: #e0e0e0; /* Lighter grey */
    border-radius: 4px;
    cursor: pointer;
    border: 2px solid transparent; /* Border placeholder */
    transition: background-color 0.2s ease, border-color 0.2s ease;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 0.7rem; /* For potential inner text */
  }
  
  .cell:hover {
    background-color: #d5d5d5;
    border-color: #bdbdbd;
  }
  
  .cellSelected {
    background-color: #4caf50; /* Green when selected */
    border-color: #388e3c; /* Darker green border */
    color: white;
  }
  
  .cellSelected:hover {
    background-color: #5cb860; /* Lighter green on hover */
     border-color: #4caf50;
  }
  
  
  /* --- 3D View Panel Styles --- */
  
  .viewPanel {
      border-left: 2px dashed #ccc; /* Separator */
      padding-left: 2rem;
  }
  
  .viewContainer {
    width: 250px;  /* Fixed size for the 3D view area */
    height: 300px;
    margin: 1rem auto; /* Center the container */
    perspective: 1000px; /* Set the perspective depth */
    perspective-origin: 50% 50%;
    background-color: #f0f4f8; /* Light blue background */
    border-radius: 8px;
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden; /* Hide anything outside */
     border: 1px solid #d1d9e6;
  }
  
  /* The scene element holds the 3D space and applies rotation */
  .scene {
    width: 80%; /* Use relative size for easier scaling */
    height: 80%;
    position: relative;
    transform-style: preserve-3d;
    /* Apply a base rotation */
    transform: rotateX(-25deg) rotateY(35deg);
    /* Optional: Add slow rotation animation */
    /* animation: spinScene 20s linear infinite; */
  }
  
  /* Keyframes for optional rotation */
  @keyframes spinScene {
    from { transform: rotateX(-25deg) rotateY(0deg); }
    to { transform: rotateX(-25deg) rotateY(360deg); }
  }
  
  
  /* The cube representing the selected cell */
  .selectedCube {
    width: 40px;  /* Size of the cube in 3D */
    height: 40px;
    position: absolute;
    top: 50%; /* Center positioning requires translation adjustment */
    left: 50%;
    transform-style: preserve-3d;
    transition: transform 0.5s ease-out; /* Animate position changes */
     /* Base transform adjusted by inline style */
     /* transform: translate3d(x, y, z); <-- set inline */
  }
  
  /* Base style for all faces of the cube */
  .cubeFace {
    position: absolute;
    width: 40px;
    height: 40px;
    background-color: rgba(76, 175, 80, 0.7); /* Semi-transparent green */
    border: 1px solid rgba(56, 142, 60, 0.9); /* Darker border */
    opacity: 0.85;
  }
  
  /* Positioning each face */
  .faceFront  { transform: rotateY(0deg) translateZ(20px); }
  .faceBack   { transform: rotateY(180deg) translateZ(20px); }
  .faceRight  { transform: rotateY(90deg) translateZ(20px); }
  .faceLeft   { transform: rotateY(-90deg) translateZ(20px); }
  .faceTop    { transform: rotateX(90deg) translateZ(20px); }
  .faceBottom { transform: rotateX(-90deg) translateZ(20px); }